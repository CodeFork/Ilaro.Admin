@model Ilaro.Admin.ViewModels.PagerInfo

@* 
 In this view they arre some calulation, some if and etc. so its bad,
 because view should be free from that things, 
 but I rather would have this in view than have a creation of html tags in code.

 Logic to create Pages its not mine. I don't remember who create that :( (I think I get this from stackoverflow).
*@
@if (Model.TotalPages <= 1)
{
    return;
}
@{var nrOfPagesToDisplay = 10;}

<div class="pagination">
    <ul>
        @{
            // Make some calculation
            var start = 1;
            var end = Model.TotalPages;
            @if (Model.TotalPages > nrOfPagesToDisplay)
            {
                var middle = (int)Math.Ceiling(nrOfPagesToDisplay / 2d) - 1;
                var below = (Model.Current - middle);
                var above = (Model.Current + middle);

                if (below < 4)
                {
                    above = nrOfPagesToDisplay;
                    below = 1;
                }
                else if (above > (Model.TotalPages - 4))
                {
                    above = Model.TotalPages;
                    below = (Model.TotalPages - nrOfPagesToDisplay);
                }

                start = below;
                end = above;
            }
        }

        @* Prev page *@
        @if (Model.Current > 1)
        {
            <text>@PagerLink("«", Model.Current - 1, Model.Url, "prev")</text>
        }
        else
        { 
            <li class="disabled"><span>«</span></li>
        }

        @* First Pages *@
        @if (start > 3)
        {
            <text>@PagerLink("1", 1, Model.Url)</text>
            <text>@PagerLink("2", 2, Model.Url)</text>
            <li class="disabled"><span>...</span></li>
        }

        @* Middle Pages *@
        @for (var i = start; i <= end; i++)
        {
            if (i == Model.Current || (Model.Current <= 0 && i == 0))
            {
                <text>@PagerLink(i.ToString(), i, Model.Url, "", "active")</text>
            }
            else
            {
                <text>@PagerLink(i.ToString(), i, Model.Url)</text>
            }
        }

        @* Last Pages *@
        @if (end < (Model.TotalPages - 3))
        {
            <li class="disabled"><span>...</span></li>
            <text>@PagerLink((Model.TotalPages - 1).ToString(), Model.TotalPages - 1, Model.Url)</text>
            <text>@PagerLink(Model.TotalPages.ToString(), Model.TotalPages, Model.Url)</text>
        }

        @* Next page *@
        @if (Model.Current < Model.TotalPages)
        {
            <text>@PagerLink("»", Model.Current + 1, Model.Url, "next")</text>
        }
        else
        { 
            <li class="disabled"><span>»</span></li>
        }
    </ul>
</div>

@helper PagerLink(string linkText, int pageNumber, string url, string rel = "", string @classes = "")
{
    url = string.Format(url, pageNumber);
    <li class="@classes"><a href="@url" rel="@rel">@linkText</a></li>
}