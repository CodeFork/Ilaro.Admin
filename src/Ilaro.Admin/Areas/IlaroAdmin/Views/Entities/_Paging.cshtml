@model PagerInfo

@*
    In this view they are some calulation, some if and etc. so it's bad,
    because view should be free from this things,
    but I rather would have this in view than have a creation of html tags in code.

    Logic to create Pages its not mine. I don't remember who create that :( (I think I get this from stackoverflow).
*@
@if (Model.TotalPages <= 1)
{
    return;
}
@{
    const int nrOfPagesToDisplay = 10;
}
<ul id="pagination-entity" class="pagination">
    @{
        // Make some calculation
        var start = 1;
        var end = Model.TotalPages;
        if (Model.TotalPages > nrOfPagesToDisplay)
        {
            var middle = (int)Math.Ceiling(nrOfPagesToDisplay / 2d) - 1;
            var below = (Model.Current - middle);
            var above = (Model.Current + middle);

            if (below < 4)
            {
                above = nrOfPagesToDisplay;
                below = 1;
            }
            else if (above > (Model.TotalPages - 4))
            {
                above = Model.TotalPages;
                below = (Model.TotalPages - nrOfPagesToDisplay);
            }

            start = below;
            end = above;
        }
    }

    @* Prev page *@
    @if (Model.Current > 1)
    {
        @PagerLink(IlaroAdminResources.PreviousPage, Model.Current - 1, "prev")
    }
    else
    {
        <li class="disabled"><span>@IlaroAdminResources.PreviousPage</span></li>
    }

    @* First Pages *@
    @if (start > 3)
    {
        <text>@PagerLink("1", 1)</text>
        <text>@PagerLink("2", 2)</text>
        <li class="disabled"><span>...</span></li>
    }

    @* Middle Pages *@
    @for (var i = start; i <= end; i++)
    {
        if (i == Model.Current || (Model.Current <= 0 && i == 0))
        {
            <text>@PagerLink(i.ToString(), i, "", "active")</text>
        }
        else
        {
            <text>@PagerLink(i.ToString(), i)</text>
        }
    }

    @* Last Pages *@
    @if (end < (Model.TotalPages - 3))
    {
        <li class="disabled"><span>...</span></li>
        <text>@PagerLink((Model.TotalPages - 1).ToString(), Model.TotalPages - 1)</text>
        <text>@PagerLink(Model.TotalPages.ToString(), Model.TotalPages)</text>
    }

    @* Next page *@
    @if (Model.Current < Model.TotalPages)
    {
        @PagerLink(IlaroAdminResources.NextPage, Model.Current + 1, "next")
    }
    else
    {
        <li class="disabled"><span>@IlaroAdminResources.NextPage</span></li>
    }
</ul>

@helper PagerLink(string linkText, int pageNumber, string rel = "", string @classes = "")
{
    <li class="@classes"><a href="@Url.PageUrl(pageNumber)" rel="@rel">@linkText</a></li>
}
